// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import "../contracts/GiftEscrow.sol";

/**
 * @title GiftEscrow Verification Script
 * @dev Post-deployment verification and contract interaction testing
 * @author mbxarts.com The Moon in a Box property
 * @author Godez22 (Co-Author)
 */
contract VerifyGiftEscrow is Script {
    
    function run() external {
        address escrowAddress = vm.envAddress("ESCROW_CONTRACT_ADDRESS");
        require(escrowAddress != address(0), "ESCROW_CONTRACT_ADDRESS not set");
        
        console.log("=== GIFTEESCROW VERIFICATION ===");
        console.log("Contract Address:", escrowAddress);
        console.log("Chain ID:", block.chainid);
        
        GiftEscrow escrow = GiftEscrow(payable(escrowAddress));
        
        // Verify contract is deployed and responsive
        console.log("\n=== CONTRACT RESPONSIVENESS ===");
        
        try escrow.VERSION() returns (string memory version) {
            console.log("Contract responding - Version:", version);
        } catch {
            console.log("❌ Contract not responding");
            return;
        }
        
        // Verify immutability
        console.log("Immutable:", escrow.IMMUTABLE());
        require(escrow.IMMUTABLE(), "Contract should be immutable");
        console.log("✅ Contract immutability verified");
        
        // Verify constants
        console.log("\n=== CONSTANTS VERIFICATION ===");
        require(escrow.FIFTEEN_MINUTES() == 900, "Invalid FIFTEEN_MINUTES");
        require(escrow.SEVEN_DAYS() == 604800, "Invalid SEVEN_DAYS");
        require(escrow.FIFTEEN_DAYS() == 1296000, "Invalid FIFTEEN_DAYS");
        require(escrow.THIRTY_DAYS() == 2592000, "Invalid THIRTY_DAYS");
        require(escrow.MAX_ATTEMPTS() == 5, "Invalid MAX_ATTEMPTS");
        require(escrow.MAX_BATCH_SIZE() == 25, "Invalid MAX_BATCH_SIZE");
        require(escrow.GATE_GAS_LIMIT() == 50000, "Invalid GATE_GAS_LIMIT");
        console.log("✅ All constants verified");
        
        // Verify interfaces
        console.log("\n=== INTERFACE VERIFICATION ===");
        require(
            escrow.supportsInterface(type(IERC721Receiver).interfaceId),
            "IERC721Receiver not supported"
        );
        require(
            escrow.supportsInterface(type(IERC1155Receiver).interfaceId),
            "IERC1155Receiver not supported"
        );
        require(
            escrow.supportsInterface(type(IAccessControl).interfaceId),
            "IAccessControl not supported"
        );
        require(
            escrow.supportsInterface(type(IERC165).interfaceId),
            "IERC165 not supported"
        );
        console.log("✅ All interfaces verified");
        
        // Verify initial state
        console.log("\n=== INITIAL STATE VERIFICATION ===");
        require(escrow.giftCounter() == 0, "Gift counter should start at 0");
        require(!escrow.paused(), "Contract should not be paused initially");
        require(escrow.paymasterMinBalance() == 0.1 ether, "Invalid paymaster min balance");
        require(escrow.maxFailedUserOpsPerHour() == 100, "Invalid max failed ops");
        console.log("✅ Initial state verified");
        
        // Verify paymaster configuration
        console.log("\n=== PAYMASTER CONFIGURATION ===");
        require(
            escrow.whitelistedMethods(escrow.claimGift.selector),
            "claimGift not whitelisted"
        );
        require(
            escrow.whitelistedMethods(escrow.claimGiftFor.selector),
            "claimGiftFor not whitelisted"
        );
        require(
            escrow.whitelistedMethods(escrow.returnExpiredGiftPublic.selector),
            "returnExpiredGiftPublic not whitelisted"
        );
        require(
            escrow.whitelistedMethods(escrow.batchReturnExpiredIncentivized.selector),
            "batchReturnExpiredIncentivized not whitelisted"
        );
        console.log("✅ Paymaster configuration verified");
        
        // Verify receiver functions
        console.log("\n=== RECEIVER FUNCTIONS ===");
        bytes4 erc721Response = escrow.onERC721Received(address(0), address(0), 0, "");
        require(
            erc721Response == IERC721Receiver.onERC721Received.selector,
            "Invalid ERC721 receiver response"
        );
        
        bytes4 erc1155Response = escrow.onERC1155Received(address(0), address(0), 0, 0, "");
        require(
            erc1155Response == IERC1155Receiver.onERC1155Received.selector,
            "Invalid ERC1155 receiver response"
        );
        
        bytes4 erc1155BatchResponse = escrow.onERC1155BatchReceived(
            address(0), 
            address(0), 
            new uint256[](0), 
            new uint256[](0), 
            ""
        );
        require(
            erc1155BatchResponse == IERC1155Receiver.onERC1155BatchReceived.selector,
            "Invalid ERC1155 batch receiver response"
        );
        console.log("✅ All receiver functions verified");
        
        // Test view functions
        console.log("\n=== VIEW FUNCTIONS ===");
        
        // Test canClaimGift with non-existent gift
        (bool canClaim, uint256 timeRemaining) = escrow.canClaimGift(999);
        require(!canClaim && timeRemaining == 0, "Non-existent gift should not be claimable");
        
        // Test getGift with non-existent gift
        (address creator, uint96 expiration, address nftContract, uint256 tokenId, bytes32 passHash, uint8 status) = escrow.getGift(999);
        require(creator == address(0), "Non-existent gift should have zero creator");
        
        // Test isGiftExpired with non-existent gift
        bool expired = escrow.isGiftExpired(999);
        require(expired, "Non-existent gift should be considered expired");
        
        // Test getGiftMessage with non-existent gift
        string memory message = escrow.getGiftMessage(999);
        require(bytes(message).length == 0, "Non-existent gift should have empty message");
        
        console.log("✅ All view functions working correctly");
        
        // Check contract balance
        console.log("\n=== CONTRACT BALANCE ===");
        uint256 balance = address(escrow).balance;
        console.log("Contract Balance:", balance);
        if (balance > 0) {
            console.log("✅ Contract funded for incentives");
        } else {
            console.log("⚠️  Contract not funded - incentives will not work");
        }
        
        // Security checks
        console.log("\n=== SECURITY CHECKS ===");
        
        // Check that critical functions are protected
        try escrow.pause() {
            console.log("❌ SECURITY ISSUE: pause() callable by anyone");
        } catch {
            console.log("✅ pause() properly protected");
        }
        
        try escrow.disableGate(address(0), "test") {
            console.log("❌ SECURITY ISSUE: disableGate() callable by anyone");
        } catch {
            console.log("✅ disableGate() properly protected");
        }
        
        try escrow.emergencyReturn(1) {
            console.log("❌ SECURITY ISSUE: emergencyReturn() callable by anyone");
        } catch {
            console.log("✅ emergencyReturn() properly protected");
        }
        
        // Gas estimation tests
        console.log("\n=== GAS ESTIMATION ===");
        
        // Estimate gas for typical operations (would need actual setup)
        console.log("⚠️  Gas estimation requires actual gift creation - skipping");
        
        // Final verification
        console.log("\n=== VERIFICATION SUMMARY ===");
        console.log("✅ Contract deployed and responsive");
        console.log("✅ All constants correct");
        console.log("✅ All interfaces supported");
        console.log("✅ Initial state correct");
        console.log("✅ Paymaster configuration correct");
        console.log("✅ Receiver functions working");
        console.log("✅ View functions working");
        console.log("✅ Security protections in place");
        
        if (balance > 0) {
            console.log("✅ Contract funded for operations");
        }
        
        console.log("\n🎉 VERIFICATION COMPLETE!");
        console.log("Contract is ready for production use");
        
        // Output verification report
        string memory report = string(abi.encodePacked(
            "# GiftEscrow Verification Report\n",
            "Contract Address: ", vm.toString(escrowAddress), "\n",
            "Chain ID: ", vm.toString(block.chainid), "\n",
            "Version: ", escrow.VERSION(), "\n",
            "Verification Time: ", vm.toString(block.timestamp), "\n",
            "Balance: ", vm.toString(balance), "\n",
            "Status: VERIFIED ✅\n\n",
            "All critical checks passed:\n",
            "- Contract responsiveness ✅\n",
            "- Constants verification ✅\n",
            "- Interface support ✅\n",
            "- Initial state ✅\n",
            "- Paymaster configuration ✅\n",
            "- Receiver functions ✅\n",
            "- View functions ✅\n",
            "- Security protections ✅\n"
        ));
        
        vm.writeFile("verification-report.md", report);
        console.log("\n📄 Verification report saved to verification-report.md");
    }
}