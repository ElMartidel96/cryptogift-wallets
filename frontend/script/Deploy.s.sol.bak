// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import "../contracts/GiftEscrow.sol";

/**
 * @title GiftEscrow Deployment Script
 * @dev Production deployment script with comprehensive verification
 * @author mbxarts.com The Moon in a Box property  
 * @author Godez22 (Co-Author)
 */
contract DeployGiftEscrow is Script {
    // Base Sepolia configuration
    address constant TRUSTED_FORWARDER = 0x69015912AA33720b842dCD6aC059Ed623F28d9f7; // Biconomy forwarder
    
    function run() external {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY_DEPLOY");
        address deployer = vm.addr(deployerPrivateKey);
        
        console.log("=== GIFTEESCROW DEPLOYMENT ===");
        console.log("Deployer:", deployer);
        console.log("Chain ID:", block.chainid);
        console.log("Trusted Forwarder:", TRUSTED_FORWARDER);
        console.log("Balance:", deployer.balance);
        
        // Verify we're on the correct network
        require(block.chainid == 84532, "Must deploy on Base Sepolia (84532)");
        require(deployer.balance > 0.01 ether, "Insufficient balance for deployment");
        
        vm.startBroadcast(deployerPrivateKey);
        
        // Deploy GiftEscrow
        console.log("\nDeploying GiftEscrow...");
        GiftEscrow escrow = new GiftEscrow(TRUSTED_FORWARDER);
        
        console.log("GiftEscrow deployed at:", address(escrow));
        
        // Verify deployment
        console.log("\n=== DEPLOYMENT VERIFICATION ===");
        console.log("Version:", escrow.VERSION());
        console.log("Immutable:", escrow.IMMUTABLE());
        console.log("Fifteen Minutes:", escrow.FIFTEEN_MINUTES());
        console.log("Seven Days:", escrow.SEVEN_DAYS());
        console.log("Fifteen Days:", escrow.FIFTEEN_DAYS());
        console.log("Thirty Days:", escrow.THIRTY_DAYS());
        console.log("Max Batch Size:", escrow.MAX_BATCH_SIZE());
        console.log("Gate Gas Limit:", escrow.GATE_GAS_LIMIT());
        
        // Verify interfaces
        console.log("\n=== INTERFACE VERIFICATION ===");
        console.log("ERC721Receiver:", escrow.supportsInterface(type(IERC721Receiver).interfaceId));
        console.log("ERC1155Receiver:", escrow.supportsInterface(type(IERC1155Receiver).interfaceId));
        console.log("AccessControl:", escrow.supportsInterface(type(IAccessControl).interfaceId));
        console.log("ERC165:", escrow.supportsInterface(type(IERC165).interfaceId));
        
        // Verify roles
        console.log("\n=== ROLE VERIFICATION ===");
        console.log("Admin Role (deployer):", escrow.hasRole(escrow.DEFAULT_ADMIN_ROLE(), deployer));
        console.log("Pauser Role (deployer):", escrow.hasRole(escrow.PAUSER_ROLE(), deployer));
        console.log("Emergency Role (deployer):", escrow.hasRole(escrow.EMERGENCY_ROLE(), deployer));
        console.log("Gate Manager Role (deployer):", escrow.hasRole(escrow.GATE_MANAGER_ROLE(), deployer));
        
        // Verify trusted forwarder
        console.log("\n=== FORWARDER VERIFICATION ===");
        console.log("Trusted Forwarder:", escrow.isTrustedForwarder(TRUSTED_FORWARDER));
        
        // Verify paymaster methods
        console.log("\n=== PAYMASTER VERIFICATION ===");
        console.log("claimGift whitelisted:", escrow.whitelistedMethods(escrow.claimGift.selector));
        console.log("claimGiftFor whitelisted:", escrow.whitelistedMethods(escrow.claimGiftFor.selector));
        console.log("returnExpiredGiftPublic whitelisted:", escrow.whitelistedMethods(escrow.returnExpiredGiftPublic.selector));
        console.log("batchReturnExpiredIncentivized whitelisted:", escrow.whitelistedMethods(escrow.batchReturnExpiredIncentivized.selector));
        
        // Initial state verification
        console.log("\n=== STATE VERIFICATION ===");
        console.log("Gift Counter:", escrow.giftCounter());
        console.log("Paused:", escrow.paused());
        console.log("Paymaster Min Balance:", escrow.paymasterMinBalance());
        console.log("Max Failed UserOps Per Hour:", escrow.maxFailedUserOpsPerHour());
        
        // Fund contract for incentives (0.5 ETH)
        console.log("\n=== FUNDING CONTRACT ===");
        payable(address(escrow)).transfer(0.5 ether);
        console.log("Contract funded with 0.5 ETH for incentives");
        console.log("Contract balance:", address(escrow).balance);
        
        vm.stopBroadcast();
        
        // Post-deployment checks
        console.log("\n=== POST-DEPLOYMENT CHECKS ===");
        
        // Test ERC721 receiver
        bytes4 receiverResponse = escrow.onERC721Received(address(0), address(0), 0, "");
        require(
            receiverResponse == IERC721Receiver.onERC721Received.selector,
            "ERC721 receiver check failed"
        );
        console.log("ERC721 Receiver: PASS");
        
        // Test ERC1155 receiver
        bytes4 erc1155Response = escrow.onERC1155Received(address(0), address(0), 0, 0, "");
        require(
            erc1155Response == IERC1155Receiver.onERC1155Received.selector,
            "ERC1155 receiver check failed"
        );
        console.log("ERC1155 Receiver: PASS");
        
        // Final deployment summary
        console.log("\n=== DEPLOYMENT SUMMARY ===");
        console.log("GiftEscrow deployed successfully");
        console.log("All interfaces verified");
        console.log("All roles configured");
        console.log("Paymaster methods whitelisted");
        console.log("Contract funded for incentives");
        console.log("Receiver functions working");
        console.log("\nDEPLOYMENT COMPLETE!");
        console.log("Contract Address:", address(escrow));
        console.log("Please update .env.local with:");
        console.log("ESCROW_CONTRACT_ADDRESS=", address(escrow));
        console.log("NEXT_PUBLIC_ESCROW_CONTRACT_ADDRESS=", address(escrow));
        
        // Save deployment info
        string memory deploymentInfo = string(abi.encodePacked(
            "# GiftEscrow Deployment Info\n",
            "ESCROW_CONTRACT_ADDRESS=", vm.toString(address(escrow)), "\n",
            "DEPLOYMENT_BLOCK=", vm.toString(block.number), "\n",
            "DEPLOYMENT_TIMESTAMP=", vm.toString(block.timestamp), "\n",
            "DEPLOYER=", vm.toString(deployer), "\n",
            "CHAIN_ID=", vm.toString(block.chainid), "\n",
            "TRUSTED_FORWARDER=", vm.toString(TRUSTED_FORWARDER), "\n"
        ));
        
        vm.writeFile("deployment-info.env", deploymentInfo);
        console.log("\nðŸ“„ Deployment info saved to deployment-info.env");
    }
}