import { ethers } from "hardhat";
import { writeFileSync } from "fs";
import { join } from "path";

async function main() {
  console.log("üöÄ Deploying CryptoGift Wallets contracts...");
  
  // Get deployer account
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with account:", deployer.address);
  
  // Check balance
  const balance = await deployer.provider.getBalance(deployer.address);
  console.log("Account balance:", ethers.formatEther(balance), "ETH");
  
  if (balance < ethers.parseEther("0.01")) {
    throw new Error("Insufficient balance for deployment");
  }
  
  // 1. Deploy ReferralTreasury
  console.log("\nüì¶ Deploying ReferralTreasury...");
  
  // You'll need to set this to your actual NFT Drop contract address
  const nftDropAddress = process.env.NEXT_PUBLIC_NFT_DROP_ADDRESS || "0x0000000000000000000000000000000000000000";
  
  if (nftDropAddress === "0x0000000000000000000000000000000000000000") {
    throw new Error("Please set NEXT_PUBLIC_NFT_DROP_ADDRESS in your environment");
  }
  
  const ReferralTreasury = await ethers.getContractFactory("ReferralTreasury");
  const referralTreasury = await ReferralTreasury.deploy(nftDropAddress);
  
  await referralTreasury.waitForDeployment();
  const treasuryAddress = await referralTreasury.getAddress();
  
  console.log("‚úÖ ReferralTreasury deployed to:", treasuryAddress);
  
  // 2. Verify contracts on BaseScan
  console.log("\nüîç Verifying contracts...");
  
  try {
    await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
    
    await hre.run("verify:verify", {
      address: treasuryAddress,
      constructorArguments: [nftDropAddress],
    });
    
    console.log("‚úÖ ReferralTreasury verified on BaseScan");
  } catch (error) {
    console.warn("‚ö†Ô∏è  Verification failed:", error.message);
  }
  
  // 3. Update environment file
  console.log("\nüìù Updating environment configuration...");
  
  const envPath = join(__dirname, "../.env.local");
  const envContent = `
# Contract Addresses (Auto-generated by deploy script)
NEXT_PUBLIC_REF_TREASURY_ADDRESS=${treasuryAddress}
NEXT_PUBLIC_NFT_DROP_ADDRESS=${nftDropAddress}

# Add these to your .env.local file:
# NEXT_PUBLIC_TEMPLATE_CLIENT_ID=your_thirdweb_client_id
# TW_SECRET_KEY=your_thirdweb_secret_key
# PHOTOROOM_KEY=your_photoroom_key
# TELEGRAM_TOKEN=your_telegram_token
# TG_CHAT=your_telegram_chat_id
`;
  
  writeFileSync(envPath, envContent);
  console.log("‚úÖ Environment file updated at:", envPath);
  
  // 4. Display summary
  console.log("\nüéâ Deployment Summary:");
  console.log("========================");
  console.log(`ReferralTreasury: ${treasuryAddress}`);
  console.log(`NFT Drop: ${nftDropAddress}`);
  console.log(`Deployer: ${deployer.address}`);
  console.log(`Network: ${hre.network.name}`);
  console.log(`Block: ${await deployer.provider.getBlockNumber()}`);
  
  console.log("\nüìã Next Steps:");
  console.log("1. Add the contract addresses to your .env.local file");
  console.log("2. Update your thirdweb dashboard with the new addresses");
  console.log("3. Fund the Paymaster for gasless transactions");
  console.log("4. Test the referral system with a small amount");
  
  return {
    referralTreasury: treasuryAddress,
    nftDrop: nftDropAddress,
  };
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Deployment failed:", error);
    process.exit(1);
  });